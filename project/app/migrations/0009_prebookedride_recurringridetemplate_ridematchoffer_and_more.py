# Generated by Django 5.2.1 on 2025-06-16 10:13

import datetime
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0008_add_calendar_and_booking_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PreBookedRide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_location', models.CharField(max_length=255)),
                ('dropoff_location', models.CharField(max_length=255)),
                ('pickup_latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('pickup_longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('dropoff_latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('dropoff_longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('scheduled_pickup_time', models.DateTimeField(db_index=True)),
                ('estimated_duration_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(300)])),
                ('pickup_window_minutes', models.IntegerField(default=15, help_text='Acceptable pickup time window in minutes', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('is_flexible', models.BooleanField(default=False, help_text='Whether rider is flexible with pickup time for optimization')),
                ('status', models.CharField(choices=[('pending', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('driver_assigned', 'Driver Assigned'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('no_show', 'No Show')], db_index=True, default='pending', max_length=20)),
                ('assignment_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes not visible to rider')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('estimated_fare', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('surge_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(5.0)])),
                ('rider_notified_at', models.DateTimeField(blank=True, null=True)),
                ('driver_notified_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['scheduled_pickup_time'],
            },
        ),
        migrations.CreateModel(
            name='RecurringRideTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(help_text="e.g., 'Daily work commute'", max_length=100)),
                ('pickup_location', models.CharField(max_length=255)),
                ('dropoff_location', models.CharField(max_length=255)),
                ('pickup_latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('pickup_longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('dropoff_latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('dropoff_longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('pickup_time', models.TimeField()),
                ('estimated_duration_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(300)])),
                ('pickup_window_minutes', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('recurrence_pattern', models.CharField(choices=[('daily', 'Daily'), ('weekdays', 'Weekdays Only'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('custom', 'Custom Pattern')], max_length=20)),
                ('custom_days', models.JSONField(blank=True, default=list, help_text='List of day numbers (0-6) for custom pattern')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('last_generated_date', models.DateField(blank=True, null=True)),
                ('generation_horizon_days', models.IntegerField(default=30, help_text='How many days ahead to generate rides', validators=[django.core.validators.MinValueValidator(7), django.core.validators.MaxValueValidator(90)])),
                ('excluded_dates', models.JSONField(blank=True, default=list, help_text='List of dates to skip (holidays, vacations, etc.)')),
                ('total_rides_generated', models.IntegerField(default=0)),
                ('total_rides_completed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RideMatchOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Response'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired'), ('withdrawn', 'Withdrawn')], db_index=True, default='pending', max_length=20)),
                ('offered_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('base_fare', models.DecimalField(decimal_places=2, max_digits=8)),
                ('bonus_amount', models.DecimalField(decimal_places=2, default=0, help_text='Additional bonus for accepting this ride', max_digits=6)),
                ('total_earnings', models.DecimalField(decimal_places=2, max_digits=8)),
                ('distance_to_pickup_km', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('estimated_arrival_time', models.DateTimeField(blank=True, null=True)),
                ('compatibility_score', models.DecimalField(decimal_places=2, default=0, help_text='Score indicating how well this match fits driver preferences', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('decline_reason', models.CharField(blank=True, choices=[('distance', 'Too Far'), ('timing', 'Bad Timing'), ('vehicle', 'Vehicle Unavailable'), ('personal', 'Personal Reason'), ('other', 'Other')], max_length=20)),
                ('decline_notes', models.TextField(blank=True)),
                ('push_notification_sent', models.BooleanField(default=False)),
                ('sms_sent', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('priority_rank', models.IntegerField(default=0, help_text='Lower number = higher priority')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['priority_rank', '-offered_at'],
            },
        ),
        migrations.CreateModel(
            name='WaitingTimeOptimization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True)),
                ('first_ride_end_time', models.DateTimeField()),
                ('second_ride_start_time', models.DateTimeField()),
                ('buffer_time_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('travel_time_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('waiting_time_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('distance_between_km', models.DecimalField(decimal_places=2, max_digits=6)),
                ('route_polyline', models.TextField(blank=True)),
                ('efficiency_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fuel_cost_estimate', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('suggested_departure_time', models.DateTimeField(blank=True, null=True)),
                ('suggested_route', models.TextField(blank=True)),
                ('optimization_notes', models.TextField(blank=True)),
                ('is_optimal', models.BooleanField(default=False)),
                ('needs_reoptimization', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['date', 'first_ride_end_time'],
            },
        ),
        migrations.RenameIndex(
            model_name='drivercalendar',
            new_name='app_driverc_driver__8e9ef4_idx',
            old_name='app_drivercalendar_driver_date_idx',
        ),
        migrations.RenameIndex(
            model_name='drivercalendar',
            new_name='app_driverc_date_887ce6_idx',
            old_name='app_drivercalendar_date_status_idx',
        ),
        migrations.AlterUniqueTogether(
            name='drivercalendar',
            unique_together={('driver', 'date', 'start_time', 'end_time')},
        ),
        migrations.AddField(
            model_name='drivercalendar',
            name='accepts_long_distance',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='drivercalendar',
            name='accepts_wheelchair',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='drivercalendar',
            name='avoided_zones',
            field=models.JSONField(blank=True, default=list, help_text='List of zones to avoid'),
        ),
        migrations.AddField(
            model_name='drivercalendar',
            name='break_duration_minutes',
            field=models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(120)]),
        ),
        migrations.AddField(
            model_name='drivercalendar',
            name='break_start',
            field=models.TimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='drivercalendar',
            name='preferred_zones',
            field=models.JSONField(blank=True, default=list, help_text='List of preferred pickup zones'),
        ),
        migrations.AlterField(
            model_name='drivercalendar',
            name='current_bookings',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='drivercalendar',
            name='max_rides',
            field=models.IntegerField(default=10, help_text='Maximum number of pre-booked rides for this time slot', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)]),
        ),
        migrations.AddIndex(
            model_name='drivercalendar',
            index=models.Index(fields=['date', 'current_bookings'], name='app_driverc_date_523443_idx'),
        ),
        migrations.AddField(
            model_name='prebookedride',
            name='assigned_driver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pre_booked_assignments', to='app.driver'),
        ),
        migrations.AddField(
            model_name='prebookedride',
            name='assigned_vehicle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pre_booked_rides', to='app.vehicle'),
        ),
        migrations.AddField(
            model_name='prebookedride',
            name='cancelled_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cancelled_pre_bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='prebookedride',
            name='rider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pre_booked_rides', to='app.rider'),
        ),
        migrations.AddField(
            model_name='recurringridetemplate',
            name='preferred_driver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_recurring_rides', to='app.driver'),
        ),
        migrations.AddField(
            model_name='recurringridetemplate',
            name='rider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurring_templates', to='app.rider'),
        ),
        migrations.AddField(
            model_name='prebookedride',
            name='recurring_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_rides', to='app.recurringridetemplate'),
        ),
        migrations.AddField(
            model_name='ridematchoffer',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ride_offers', to='app.driver'),
        ),
        migrations.AddField(
            model_name='ridematchoffer',
            name='pre_booked_ride',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_offers', to='app.prebookedride'),
        ),
        migrations.AddField(
            model_name='waitingtimeoptimization',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waiting_optimizations', to='app.driver'),
        ),
        migrations.AddField(
            model_name='waitingtimeoptimization',
            name='first_ride',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='as_first_ride', to='app.prebookedride'),
        ),
        migrations.AddField(
            model_name='waitingtimeoptimization',
            name='second_ride',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='as_second_ride', to='app.prebookedride'),
        ),
        migrations.RemoveField(
            model_name='drivercalendar',
            name='break_times',
        ),
        migrations.RemoveField(
            model_name='drivercalendar',
            name='driver_notes',
        ),
        migrations.RemoveField(
            model_name='drivercalendar',
            name='is_recurring',
        ),
        migrations.RemoveField(
            model_name='drivercalendar',
            name='recurring_days',
        ),
        migrations.RemoveField(
            model_name='drivercalendar',
            name='zone_preference',
        ),
        migrations.AddIndex(
            model_name='recurringridetemplate',
            index=models.Index(fields=['rider', 'is_active'], name='app_recurri_rider_i_6877f1_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringridetemplate',
            index=models.Index(fields=['start_date', 'end_date'], name='app_recurri_start_d_3c7785_idx'),
        ),
        migrations.AddIndex(
            model_name='recurringridetemplate',
            index=models.Index(fields=['last_generated_date'], name='app_recurri_last_ge_76396e_idx'),
        ),
        migrations.AddIndex(
            model_name='prebookedride',
            index=models.Index(fields=['rider', 'scheduled_pickup_time'], name='app_prebook_rider_i_c83991_idx'),
        ),
        migrations.AddIndex(
            model_name='prebookedride',
            index=models.Index(fields=['assigned_driver', 'scheduled_pickup_time'], name='app_prebook_assigne_ad7d31_idx'),
        ),
        migrations.AddIndex(
            model_name='prebookedride',
            index=models.Index(fields=['status', 'scheduled_pickup_time'], name='app_prebook_status_8fcb75_idx'),
        ),
        migrations.AddIndex(
            model_name='prebookedride',
            index=models.Index(fields=['scheduled_pickup_time', 'status'], name='app_prebook_schedul_70e46f_idx'),
        ),
        migrations.AddConstraint(
            model_name='prebookedride',
            constraint=models.CheckConstraint(condition=models.Q(('scheduled_pickup_time__gte', datetime.datetime(2025, 6, 16, 12, 13, 31, 455176, tzinfo=datetime.timezone.utc))), name='pre_booking_min_advance_time'),
        ),
        migrations.AddIndex(
            model_name='ridematchoffer',
            index=models.Index(fields=['driver', 'status', '-offered_at'], name='app_ridemat_driver__b37bc6_idx'),
        ),
        migrations.AddIndex(
            model_name='ridematchoffer',
            index=models.Index(fields=['pre_booked_ride', 'status'], name='app_ridemat_pre_boo_8cf02d_idx'),
        ),
        migrations.AddIndex(
            model_name='ridematchoffer',
            index=models.Index(fields=['expires_at', 'status'], name='app_ridemat_expires_1a9132_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ridematchoffer',
            unique_together={('pre_booked_ride', 'driver')},
        ),
        migrations.AddIndex(
            model_name='waitingtimeoptimization',
            index=models.Index(fields=['driver', 'date'], name='app_waiting_driver__a36b86_idx'),
        ),
        migrations.AddIndex(
            model_name='waitingtimeoptimization',
            index=models.Index(fields=['waiting_time_minutes'], name='app_waiting_waiting_ddb94e_idx'),
        ),
        migrations.AddIndex(
            model_name='waitingtimeoptimization',
            index=models.Index(fields=['efficiency_score'], name='app_waiting_efficie_4bdc3a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='waitingtimeoptimization',
            unique_together={('driver', 'first_ride', 'second_ride')},
        ),
    ]
